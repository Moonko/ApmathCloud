@{
	var amplitudeRequest = Request.Params["amplitude"];
	var amplitudeValue = 1;
	var clear = int.TryParse(amplitudeRequest, out amplitudeValue);
	var errorMssage = "no amplitude provided, please input http://apmath4oj.azurewebsites.net/mem.cshtml?amplitude=5";
}
<html>
<head>
  <meta charset="utf-8">
  <script src="//d3js.org/d3.v3.min.js"></script>
  <title>Feel the force!</title>
</head>
<body>
<script type="text/javascript">

@if(!clear){
	Response.Write(String.Format("alert({0});", errorMssage));
}

var width = 960,
    height = 500;

var nodes = d3.range(200).map(function() { return {radius: Math.random() * 12 + 4}; }),
    root = nodes[0],
    color = d3.scale.category10();

root.radius = 0;
root.fixed = true;

var force = d3.layout.force()
    .gravity(0.05)
    .charge(function(d, i) { return i ? 0 : -2000; })
    .nodes(nodes)
    .size([width, height]);

force.start();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.selectAll("circle")
    .data(nodes.slice(1))
  .enter().append("circle")
    .attr("r", function(d) { return d.radius; })
    .style("fill", function(d, i) { return color(i % 3); });

force.on("tick", function(e) {
  var q = d3.geom.quadtree(nodes),
      i = 0,
      n = nodes.length;

  while (++i < n) q.visit(collide(nodes[i]));

  svg.selectAll("circle")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
});

svg.on("mousemove", function() {
  var p1 = d3.mouse(this);
  root.px = p1[0];
  root.py = p1[1];
  force.resume();
});

function collide(node) {
  var r = node.radius + 16,
      nx1 = node.x - r,
      nx2 = node.x + r,
      ny1 = node.y - r,
      ny2 = node.y + r;
  return function(quad, x1, y1, x2, y2) {
    if (quad.point && (quad.point !== node)) {
      var x = node.x - quad.point.x,
          y = node.y - quad.point.y,
          l = Math.sqrt(x * x + y * y),
          r = node.radius + quad.point.radius;
      if (l < r) {
        l = (l - r) / l * .5;
        node.x -= x *= l;
        node.y -= y *= l;
        quad.point.x += x;
        quad.point.y += y;
      }
    }
    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
  };
}

 // mathbox = mathBox({
 //      plugins: ['core', 'controls', 'cursor'],
 //      controls: {
 //        klass: THREE.OrbitControls
 //      },
 //    });
 //    three = mathbox.three;

 //    three.camera.position.set(3.5, 1.4, -2.3);
 //    three.renderer.setClearColor(new THREE.Color(0x204060), 1.0);

 //    time = 0
 //    three.on('update', function () {
 //      clock = three.Time.clock
 //      time = clock / 4
 //    });

 //    view = mathbox
 //      .unit({
 //        scale: 720,
 //      })
 //      .cartesian({
 //        range: [[-3, 3], [0, 6], [-3, 3]],
 //        scale: [2, 2, 2],
 //      });
 //    view.axis({ axis: 1, width: 15 });
 //    view.axis({ axis: 2, width: 15 });
 //      view.axis({ axis: 3, width: 15 });

 //    view.grid({
 //      width: 5,
 //      opacity: 0.5,
 //      axes: [1, 3],
 //    });

 //    view.area({
 //      id: 'sampler',
 //      width: 83,
 //      height: 83,
 //      axes: [1, 3],
 //      expr: function (emit, x, y, i, j) {
 //        emit(x, 3 * (.5 + .5 * (Math.sin(x*@amplitudeValue + time) * Math.sin(y/@amplitudeValue + time))), y);
 //      },
 //      channels: 3,
 //    });
 //    view.surface({
 //      lineX: true,
 //      lineY: true,
 //      shaded: true,
 //      color: 0x5090FF,
 //      width: 5,
 //    });

 //    surface = mathbox.select('surface')

</script>
</body>
</html>